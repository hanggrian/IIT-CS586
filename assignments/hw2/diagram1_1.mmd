classDiagram
  direction TB
  class Server1 {
    +service1(string, integer, integer) void
    +service2(string, integer, integer) void
    +service3(string) integer
    +service4(string) float
  }
  class Server2 {
    +service1(string, integer) void
    +service2(string, integer) void
    +service3(string) integer
    +service4(string) float
  }
  class ServerProxy {
    -broker : Broker
    +callServer(Request) void
  }
  class ServerProxy1 {
    -server : Server1
    +callServer(Request) void
  }
  class ServerProxy2 {
    -server : Server2
    +callServer(Request) void
  }
  ServerProxy1 --|> ServerProxy
  ServerProxy2 --|> ServerProxy
  ServerProxy1 -- Server1 : delegates
  ServerProxy2 -- Server2 : delegates

  class ClientA {
    -proxy : ClientProxyA
    +process() void
  }
  class ClientB {
    -proxy : ClientProxyB
    +process() void
  }
  class ClientProxy {
    -broker : Broker
    -request : Request
  }
  class ClientProxyA {
    +service1(string, integer, integer) void
    +service2(string, integer) void
    +service3(string) integer
    +service4(string) float
  }
  class ClientProxyB {
    +service1(string, integer) void
    +service2(string, integer, integer) void
    +service3(string) integer
    +service4(string) float
  }
  ClientProxyA --|> ClientProxy
  ClientProxyB --|> ClientProxy
  ClientA -- ClientProxyA : delegates
  ClientB -- ClientProxyB : delegates

  class Broker {
    -currentProxy: ServerProxy
    -proxies : Map~string, ServerProxy~
    +registerServer(ServerProxy, string) void
    +unregisterServer(ServerProxy) void
    +forwardServer(Request) void
  }
  class Request {
    +operation : string
    +s : string
    +i1 : integer
    +i2 : integer
    +result1 : integer
    +result2 : float
  }
  Broker "1" -- "*" ServerProxy : responds
  ClientProxy "*" -- "1" Broker : requests
  Request -- Broker : uses
  Request -- ServerProxy : processed by
  ClientProxy -- Request : creates
