sequenceDiagram
  actor User
  participant ClientA
  participant ClientProxyA
  participant Request
  participant Broker
  participant ServerProxy2
  participant Server2

  ServerProxy2 ->> Broker : register(self, "void service2(string, int")
  activate Broker
  activate ServerProxy2
  deactivate ServerProxy2

  User ->> ClientA : process()
  activate ClientA

  ClientA ->> ClientProxyA : service2("text", 12)
  activate ClientProxyA

  ClientProxyA ->> Request : operation="void service2(string, int)"<br>s="text"<br>i1="int"
  activate Request
  Request -->> ClientProxyA : request
  deactivate Request

  ClientProxyA ->> Broker : forwardServer(request)

  Broker ->> Broker : findServer(request.operation)
  Broker ->> ServerProxy2 : callServer(request)

  activate ServerProxy2
  ServerProxy2 ->> Server2 : service2(request.a, request.i1)
  activate Server2
  Server2 ->> Server2 : Execute service logic
  Server2 -->> ServerProxy2 : null
  deactivate Server2

  ServerProxy2 -->> Broker :
  deactivate ServerProxy2

  Broker -->> ClientProxyA :
  deactivate Broker

  ClientProxyA -->> ClientA :
  deactivate ClientProxyA
  deactivate ClientA
