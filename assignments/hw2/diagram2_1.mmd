classDiagram
  direction TB
  class ClientA {
    -factory : AbstractFactoryA
    -server : Server
    +process() void
  }
  class ClientB {
    -factory : AbstractFactoryB
    -server : Server
    +process() void
  }
  class Server {
    -sort: Sort
    -search: Search
    +initialize(factory : AbstractFactory) void
    +sort(items : Object[]) Object[]
    +search(items : Object[]) Object
  }
  ClientA -- Server : requests
  ClientB -- Server : requests

  class Sort {
    +sort(items : Object[]) Object[]
  }
  class Search {
    +search(items : Object[]) Object
  }
  Server -- Sort : responds
  Server -- Search : responds

  class HeapSort {
    +sort(items : Object[]) Object[]
  }
  class MergeSort {
    +sort(items : Object[]) Object[]
  }
  Sort <|-- HeapSort
  Sort <|-- MergeSort

  class BinarySearch {
    +search(items : Object[]) Object
  }
  class LinearSearch {
    +search(items : Object[]) Object
  }
  Search <|-- BinarySearch
  Search <|-- LinearSearch

  class AbstractFactory {
    <<interface>>
    +getSort() Sort
    +getSearch() Search
  }
  class AbstractFactoryA {
    +getSort() Sort
    +getSearch() Search
  }
  class AbstractFactoryB {
    +getSort() Sort
    +getSearch() Search
  }
  AbstractFactory -- ClientA : uses
  AbstractFactory -- ClientB : uses
  AbstractFactory -- Server : initialized by
  AbstractFactory <|-- AbstractFactoryA
  AbstractFactory <|-- AbstractFactoryB
  AbstractFactoryA -- BinarySearch : searched by
  AbstractFactoryA -- HeapSort : sorted by
  AbstractFactoryB -- LinearSearch : searched by
  AbstractFactoryB -- MergeSort : sorted by
